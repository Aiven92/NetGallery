//
//  NetworkImagesCollectionViewController.swift
//  NetGallery
//
//  Created by Vasiliy Samarin on 04.03.2021.
//

import Foundation
import UIKit

private let reuseIdentifier = "Cell"

class NetworkImagesCollectionViewController: UICollectionViewController {
    var viewModel: CollectionViewViewModelType!
    
    private func updateViewForSearchRequest(for request: String) {
        viewModel.searchRequest(for: request, completion: {
            DispatchQueue.main.async { self.collectionView.reloadData()}
        })
    }
        
    override func viewDidLoad() {
        super.viewDidLoad()
        self.navigationItem.title = "Flickr"
        
        viewModel = NetworkImageCollectionViewViewModel()
        
        updateViewForSearchRequest(for: "Electrolux")
        
        self.collectionView?.backgroundColor = .white
        self.collectionView?.register(NetworkImageCell.self, forCellWithReuseIdentifier: reuseIdentifier)
    }
}

extension NetworkImagesCollectionViewController: UICollectionViewDelegateFlowLayout {

    override func numberOfSections(in collectionView: UICollectionView) -> Int {
        let numberOfSections = viewModel.numberOfSections()
        return numberOfSections
    }

    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        let numberOfItemsInSection = viewModel.numberOfItemsInSection(section: section)
        return numberOfItemsInSection
    }

    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as? NetworkImageCell
        
        guard let collectionViewCell = cell, let viewModel = viewModel else{ return UICollectionViewCell() }
        
        print("create cell \(indexPath)")
        let cellViewModel = viewModel.cellViewModel(forIndexPath: indexPath)
        // Create cell with own viewModel, generated by upper viewModel
        collectionViewCell.viewModel = cellViewModel
        
        return collectionViewCell
    }

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let length = (self.view.frame.width - 8) / 2
        return CGSize(width: length, height: length)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 8
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 8
    }
}
